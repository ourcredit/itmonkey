<style lang="less">
.price {
  margin: 5rpx;
  margin-right: 70rpx;
  padding: 0 10px;
  height: 2em;
  line-height: 2em;
  color: #000000;
  text-align: right;
}
</style>
<template>
  <view class="container">
    <!-- 搜索插件 -->
    <search :searchApi="searchApi" :params="jobparams">
      <view slot="action" class="weui-search-bar__cancel-btn" @tap="create">
        <i class="iconfont icon-xiugai" ></i>
      </view>
    </search>
    <!-- 轮播图 -->
    <view>
      <swiper :list.sync="shufflings"></swiper>
    </view>

    <list :searchApi="searchApi" :params="jobparams" :hasAction="hasAction">
      <view class="price"  @tap="detail({{item}})" slot="go"> <i class="iconfont icon-chakan" ></i>
     {{!item.state?(item.creatorId==user.customerId?'查':'报'):(item.state==0?'执':'完')}}</view>
    </list>
  </view>
</template>

<script>
import wepy from 'wepy';
import { getShufflings, getJobs } from 'api/api';
import SearchBar from '@/components/searchbar'; // alias example
import Swiper from '@/components/swiper';
import JobList from '@/components/job-list';
import { connect } from 'wepy-redux';
@connect({
  user(state) {
    return state.userState.user;
  },
  hasRegister(state) {
    return state.userState.hasRegister;
  },
  jobsCount(state) {
    return state.userState.user.jobsCount;
  }
})
export default class Dash extends wepy.page {
  components = {
    swiper: Swiper,
    search: SearchBar,
    list: JobList
  };
  data = {
    shufflings: null,
    searchApi: getJobs,
    hasAction: true,
    jobparams: {
      skipCount: 0,
      maxResultCount: 10,
      filter: '',
      customerId: null
    }
  };
  computed = {
    now() {
      return +new Date();
    }
  };
  // 方法
  methods = {
    detail(item) {
      if (!this.hasRegister) {
        wx.showToast({
          title: '当前用户还未注册',
          mask: true,
          duration: 1000
        });
        this.$navigate('../my/register');
        return;
      }
      if (this.jobsCount >= 3) {
        wx.showToast({
          title: '已经参与多份工作',
          mask: true,
          duration: 1000
        });
        return;
      }
      this.$preload('model', item);
      this.$navigate('jobdetail');
    },
    async create() {
      debugger;
      if (!this.hasRegister) {
        this.$navigate({
          url: '/pages/my/register'
        });
      } else {
        this.$navigate({
          url: 'create'
        });
      }
    }
  };
  async initShuffling() {
    var r = await getShufflings();
    if (r.success) {
      this.shufflings = r.result.items;
    }
    this.$apply();
  }
  async onLoad() {
    await this.initShuffling();
  }
  onShow() {
    this.$broadcast('init');
  }
  onReachBottom() {}
  onPullDownRefresh() {}
}
</script>
